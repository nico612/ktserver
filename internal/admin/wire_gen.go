// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package admin

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"ktserver/internal/admin/biz"
	"ktserver/internal/admin/conf"
	"ktserver/internal/admin/data"
	"ktserver/internal/admin/server"
	"ktserver/internal/admin/service"
	"ktserver/internal/pkg/auth"
	"ktserver/internal/pkg/authz"
	"ktserver/internal/pkg/genericoptions"
	"ktserver/internal/pkg/initdb"
	"ktserver/internal/pkg/initdb/handler"
	"ktserver/internal/pkg/lock"
	"ktserver/internal/pkg/middleware"
	"ktserver/pkg/db"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(config *conf.Config, mySQLOptions *db.MySQLOptions, redisOptions *db.RedisOptions, jwtOpts *auth.JWTOpts, authOptions *genericoptions.AuthOptions, logger log.Logger) (*kratos.App, func(), error) {
	tokener, err := auth.NewDefaultTokener(jwtOpts)
	if err != nil {
		return nil, nil, err
	}
	universalClient, err := db.NewRedis(redisOptions)
	if err != nil {
		return nil, nil, err
	}
	authenticator := auth.NewAuthenticator(tokener, authOptions, universalClient)
	jwtMiddleware := middleware.NewJWTMiddleware(authenticator)
	gormDB, err := db.NewMySQL(mySQLOptions)
	if err != nil {
		return nil, nil, err
	}
	casbinAuthorizer := authz.NewCasbinAuthorizer(gormDB, logger)
	authzMiddleware := middleware.NewAuthzMiddleware(casbinAuthorizer)
	datastore, cleanup, err := data.NewStore(gormDB, logger)
	if err != nil {
		return nil, nil, err
	}
	baseUseCase, err := biz.NewBaseUseCase(config, logger, authenticator, datastore)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	captchaUseCase := biz.NewCaptchaUseCase(config, logger, universalClient)
	baseService := service.NewBaseService(config, logger, baseUseCase, captchaUseCase)
	mysqlInitHandler := handler.NewMysqlInitHandler()
	initDBService := initdb.NewInitDBService(mysqlInitHandler)
	dbuService := service.NewDBUService(config, logger, initDBService)
	redisLocker := lock.NewRedisLocker(logger, universalClient)
	userUseCase := biz.NewUserUseCase(datastore, redisLocker)
	userService := service.NewUserService(config, logger, userUseCase)
	menuUseCase := biz.NewMenuUseCase(datastore)
	menuService := service.NewMenuService(logger, menuUseCase)
	authorityUseCase := biz.NewAuthorityUseCase(datastore)
	authorityService := service.NewAuthorityService(logger, authorityUseCase)
	routerService := server.RouterService{
		Authmw:    jwtMiddleware,
		Authzmw:   authzMiddleware,
		Base:      baseService,
		Initdb:    dbuService,
		User:      userService,
		Meun:      menuService,
		Authority: authorityService,
	}
	router := server.NewRouter(config, routerService)
	httpServer := server.NewHTTPServer(config, router, logger)
	app := newApp(logger, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
